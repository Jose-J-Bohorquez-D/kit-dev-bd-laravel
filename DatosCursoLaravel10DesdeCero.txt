______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
13)- eloquent min 1:09:59

______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
13)- migraciones min 59:19
hay que pensar que las migraciones son como los planos de la base de datos, como la
plantilla, las migraciones se hacen a partir de unas plantillas que estan en:
database/migrations/ y por defecto hay 4 create users, create password, 
create failed y create personal, ya que son solo plantillas para activarlas o hacerlas
funcionar es nesesario hacer la migracion o la ejecucion de dichas plantillas por
la terminal y verificando que estemos dentro de la carpeta de el proyecto 
con el comando: 
php artisan migrate 
se activan todas las migraciones, por defecto las 
migraciones tienen un metodo up() el cual en su interior determina las acciones como
crear y un metodo down que vendria siento lo contrario como eliminar 
si ahora queremos revertir los cambios que se hicieron con el php artisan migrate lo
unico que se debe hacer es poner el siguiente comando:
php artisan migrate:rollback 
y esto eliminara todas las migraciones anteriores
ahora pasan dos eventos si estamos en produccion y nesesitamos agregar un campo en 
una tabla, pero no hay datos de importancia o son de prueba (pilas)esto elimina todo
con:
 php artisan migrate:fresh
eliminara todas las migraciones, y las vuelve a crear de ceros esto para poner el 
campo nuevo que ingresamos 

ahora vamos a crear una nueva migracion desde cero y para una tabla especifica:
con : php artisan make:migration create_posts_table

esto creara una plantilla y esta es la que modificaremos, ahora luego de
hacer cambios y si por metodologias o nesesidad es nesesario agregar campos
a la tabla , sin perder datos es nesesario crear una nueva migracion con la
siguiente convencion:
php artisan make:migration add_body_to_posts_table
y luego agregamos los campos que queremos adicionar a la tabla de posts
por que la convencion la lee automaticamente laravel y lee el 
(_to_) y la tabla (_posts_), por eso se debe hacer con esta convencion
luego debemos agregar los campos nuevos hay y migrarla nuevamente
un truquillo es este 
$table->longText('contenido')->after('titulo'); 
->acfter le estamnos diciendo que nos ubique el campo conido despues de el campo
titulo, este caso es para cuando tengamos que mantener datos en la base de datos
si no es asi deberiamos solo editar la migracion inicial y darle refresh
______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
12)- database conexion o conexion a la base de datos min 53:53
para generar la conexion se debe editar el archivo .env teniendo en cuenta 
el config/database.php yo en este caso practivo me cree una base de datos usando el
boton de database en la interface de laragon la cual me abrio heidy sql en otro puerto
y med io las opciones normales del heidy sql , ahora procedere a crear una tabla para
las practicas con sql

ahora es de saber que podriamos manejar asi la base de datos si ya hay una existente
pero si por el contrario no es asi, es de saber que hay un sistema para crear  el esquema
de la base de datos y lo veremo mas adelnate

despues de crear la tabla posts y agregar unos 4 posts
regrese a el controlador en app/http/controllers/PostController.php
para revisar si tenia este referencia:
use Illuminate\Support\Facades\DB;

luego edite el metodo index hasta que lo use para conectarme a la base de datos con la
siguiente linea $posts = DB::table('posts')->get(); y quedo asi mi controlador

<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PostController extends Controller
{
    public function index()
    {
        $posts = DB::table('posts')->get();
                
        return view('blog',['posts'=>$posts]);
    }
}
 como en la vista de blog me dio error por que la variable posts , era un array y luego 
 de leer la base de datos con laravel , laravel define una clase para este procedimiento
 llamado stdClass que sirve para generar objetos genericos con laravel en este proceso
 asi que tuve que modificar mi vista para acceder a los datos como en un objeto asi

 <x-layouts.app 
	title="Blog" 
	meta-description="Blog meta description"
	>
	<h1 class="text-center">Pagina De Blog</h1>
	@foreach($posts as $post)
		<h1>@dump($post->titulo)</h1>
	@endforeach
</x-layouts.app>
______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
11)- Controllers o controladores

deberiamos saber que se pueden pasar los siguientes datos hacia una vista
/*Route::view('/blog',"blog", ['posts' => $posts])->name('blog');*/
/*Route::view('/blog',"blog",function(){
    $posts = [
    ['titulo' => 'primer post'],
    ['titulo' => 'segundo post'],
    ['titulo' => 'tercero post'],
    ['titulo' => 'cuarto post'],
    ['titulo' =>  'quinto post']
];
return view('blog',['posts'=>$posts]);
})->name('blog');*/

los controladores se pueden hacer o crear de manera manual en el editor de texto,pero
se debe tener presentes las rutas y las dependencias y referencias, otra manera de hacerlo
es por la terminal , esto para crear un controlador de 1 sola accrion y los controladores
se almacenen por defecto en app/http/controllers/  alli puedes crearlos de manera manual
y para llamar a dichos controladores desde las rutas puede usar una de las siguientes dos 
opciones:
/*asi es para llamar a un controlador de una sola aacion o un solo metodo, eso en las rutas*/
Route::get('/blog',PostController::class)->name('blog');
Route::get('/blog',PostController::class);
o
Route::get('/blog','App\Http\Controllers\PostController');

si revisamos el controlador se veria asi:
<?php 
namespace App\Http\Controllers;
class PostController
{
	public function __invoke()
	{
		$posts = [
		    ['titulo' => 'primer post'],
		    ['titulo' => 'segundo post'],
		    ['titulo' => 'tercero post'],
		    ['titulo' => 'cuarto post'],
		    ['titulo' =>  'quinto post'],
			];
				return view('blog',['posts'=>$posts]);
	}
}
?>

pero como vamos a usar diferentes acciones o metodos entonces para hacer el llamado desde la vista
seria de la siguiente manera observa:
Route::get('/blog',[PostController::class,'NombreMetodoParaEjecutar'])->name('blog');

y para crearlos por la consola de laravel es por medio del comando artisan 

quedamos en el minuto 45:50
	
______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
10)- Blade Components o componentes de blade
	la primera diferencia conlos componentes es que aca se usan slots por que dentro de todo componente de blade tenemos la 
	variable resewrvada {{ $slot }} donde se imprime el contenido variable principal , seria el equivalente al @yield('propiedad')
	pero mas facil, mas pulido jajaja, para usar el slot en las vistas hay dos maneras:
	
	A)-la primera es el @component('Carpeta.archivoComponente')
	asi que todo lo que pongamos en la vista dentro de el component se mostrara en la platilla donde se hizo el llamado con el slot ejemplo:
	@component('components.layout')
		<h1 class="text-center">Pagina De Inicio</h1>
	@endcomponet
	y en la plantilla se veria asi :
		<!DOCTYPE html>
		<html>
		<head>
		  <meta charset="utf-8">
		  <meta name="viewport" content="width=device-width, initial-scale=1">
		  <title>laravel</title>
		</head>
		<body>

			{{ $slot }}

		</body>
		</html>

		B)-la segunda es con las etiquetas de componentes de blade , es como una etiqueta pero con el nombre del componente asi:
		<x-layout>
			<h1 class="text-center">Pagina De Inicio</h1>
		</x-layout>

		luego tenemos otras opciones como los componentes con parametros de propiedad en los que podemos pasar etiquetas asi:
		asi lo defino en la plantilla

		<title>KitDevBD -> {{ $tituloPagina ?? ""}}</title> //el ?? "" es por si no encuentra la propiedad entopnces imprime lo que tenga "" dentro 

		y enseguida es como se define en las vistas para que las interacciones sean mas amenas asi como se plasma enseguida

		<x-slot name="tituloPagina">
			Inicio
		</x-slot>

		tambien lo podemos hacer asi en la plantilla 
		<title>KitDevBD -> {{ $title ?? ""}}</title>

		y en la vista lo referenciamos asi:
		<x-layout title="inicioBD">
			<h1 class="text-center">Pagina De Inicio</h1>
		</x-layout>

		en el siguiente veras como se pasa la propiedad escrita en camelCase en la plantilla asi:
		<meta name="description" content="  {{ $metaDescription ?? 'Default meta description KitDevBD' }} "> 

		y en la vista se pasa la referencia y por convencion escrita en kebab kase asi:
		<x-layout title="inicio" meta-description="inicio meta description">
			<h1 class="text-center">Pagina De Inicio</h1>
		</x-layout>

		asi se veria ordenado e identado checa:
		<x-layout 

			title="inicio" 
			meta-description="inicio meta description">

			<h1 class="text-center">Pagina De Inicio</h1>

		</x-layout>

		a continuacion es de saberse que si tienes carpeta tras carpeta tras carpeta en views cunado uses los componentes debes poner
		como en este caso que mi ruta esta en views/components/layouts/app.blade.php y tambien esta navegacion.blade.php pues hay que cambiar las 
		rutas en los componentes en las vistas de la siguientes maneras:
		<x-layouts.app 

			title="inicio" 
			meta-description="inicio meta description"

			>

			<h1 class="text-center">Pagina De Inicio</h1>

		</x-layouts.app>

		y como la barra de navegacion tambien fue afectada por el cambio de tuta entonces pasa igual pasa de estar asi en la plantilla:
		  <x-navegacion/>  a estar asi :     <x-layouts.navegacion/>

		si nesesitamos que ejecute php en un atributo , blade no deja a menos de que se le anteponga :  como ejemplo asi
		queremos hacer uns suma y ponemos el atributo  sum="2+2" blade no lo ejecutara a menos de que se pongas asi 
		:sum="2+2" y para que salga el resultado en la plantila se debe llamar con el nombre del atributo pero como una variable asi:
		{{ $sum }}
______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
9)- blade layouts o plantillas reutilizables de blade
	las plantillas reutilizables tienen dos opciones de uso como lo son:

	A.herencias de plantillas
	B.componentes

	A. para hacer uso de la herencias de plantillas de separa la plantilla base como
	   en el tradicional mvc y asi como se hizo con el nav o la barra de navegacion
	   ya separada la plantilla en un archivo, para poder llamar esa plantilla o poder
	   hacer uso de la misma se debe usar la directiva @extends('carpetaContenedoraDeLaPlanilla')
	   ejemplo mas practico asi:

	   @extends('layouts.appPlantilla') 

	   y bien asi llamamos la plantilla en las vistas, ahora vamos a mostrar el html o las
	   secciones de codigo que queremos que se muestren en la plantilla por que finalmente 
	   lo que se muestra al final en el navegador es la plantilla que se asigno
	   y esto se aria usando la convencion @yield('nombreCualquieraDescriptivoPuedeSer') en
	   la plantilla en mi caso sera: 
	   
	   @yield('contenido') //asi se usa en la plantilla
		
		osea me explico @yield('contenido') se usa en la plantilla para que la plantilla lea
		lo que esta en la pagina de la vista, y en la vista se debe usar la convencion:
		
		//asi se usa en la las vistas
		@section('contenido') //como se aprecia tiene el atributo contenido que se puso arriba
		  <h1 class="text-center">Pagina De Welcome O Inicio O Home</h1>
		@endsection

		y en el interior de la convencion va el html que se va a mostrar en la plantilla 

		tip a recordar:

		A: primero le damos el @extends()
		B: luego definimos la seccion contenido y deberia quedar asi en las vistas

		@extends('layouts.appPlantilla')
		@section('contenidoPagina')
			<h1 class="text-center">Pagina De Welcome O Inicio O Home</h1>
		@endsection

		y en la platilla principal quedaria asi:

		<!DOCTYPE html>
		<html>
		<head>
		  <meta charset="utf-8">
		  <meta name="viewport" content="width=device-width, initial-scale=1">
		  <title>laravel</title>
		</head>
		<body>

			@include('layouts.navegacion')

			@yield('contenidoPagina')

		</body>
		</html>

		es de saber que una plantilla puede tener multiples @tield('') 

______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
8)- blade el motor de plantillas de laravel
	para utilizar blade el unico requisito es que la vista debe terminar en blade.php
	como ejemplos:
	
	inicio.blade.php
	nosotros.blade.php
	contacto.blade.php
	perfil.blade.php

	es de tener en cuenta que si usamos blade, cuando hacemos referencia a las rutas en el html
	ya no se haria asi:

	<a href="<?= route('nosotros') ?>">Nosotros</a>
	<a href="<?= route('blog') ?>">Blog</a>
	<a href="<?= route('contacto') ?>">Contacto</a>
	<a href="<?= route('ingreso') ?>">Ingresar</a>
    <a href="<?= route('registro') ?>">Registro</a>

    si no que se deberia cambiar la sintaxis de la siguiente manera para que funcione blade a la perfeccion

    <a href=" {{ route('nosotros') }} 	">Nosotros</a>
	<a href=" {{ route('blog') 	   }} 	">Blog</a>
	<a href=" {{ route('contacto') }} 	">Contacto</a>
	<a href=" {{ route('ingreso')  }} 	">Ingresar</a>
    <a href=" {{ route('registro') }} 	">Registro</a>

    ya que inplementamos blade es nesesario usar sus directivas en este caso como vamos a 
    modularizar con un nav en una plantilla nueva de blade como en el mvc tradicional ya 
    separado en un archivo nuevo el nav, para poder usarlo en otros archivos
    se incluye asi: 
    @include('partials.navegacion')

    no es neserario poner la ruta del achivo que contiene el nav pero si la carpeta contenedora
    como lo es partials y adicionalmenten no se le pone / , para ingresar a la carpeta se pone .
	asi tal cual: @include('partials.navegacion') comom ven tampoco hay que poner la extencion 
	del archivo que en este caso es navegacion.blade.php , pues blade asume que el archivo ya 
	tiene esta extencion
______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
7)- named router o nombres de rutas:
	los asignamos asi:
	Route::view('ruta','vista')->name('nombreRuta');
	y asi sucesivamente como en seguida
	Route::view('/',"welcome")->name('home');
	Route::view('nosotros',"nosotros")->name('nosotros');
	Route::view('servicios',"servicios")->name('servicios');
	Route::view('contacto',"contacto")->name('contacto');
	Route::view('blog',"blog")->name('blog');
	Route::view('registro',"registro")->name('registro');
	Route::view('recuperarCuenta',"recuperarCuenta")->name('recuperarCuenta');
	Route::view('perfil',"perfil")->name('perfil');
	Route::view('ingreso',"ingreso")->name('ingreso');
	Route::view('salir',"salir")->name('salir');
	luego le hacemos referencia de la siguiente manera el en html
	<a href="<?= route('nameAsigandoEnLaRuta') ?>">Inicio</a>
	<a href="<?= route('nosotros') ?>">Nosotros</a>
	<a href="<?= route('blog') ?>">Blog</a>
	<a href="<?= route('contacto') ?>">Contacto</a>
	<a href="<?= route('ingreso') ?>">Ingresar</a>
    <a href="<?= route('registro') ?>">Registro</a> 
______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
6)- rutas en laravel:
	Route::get(); viendo
	Route::view(); viendo
	Route::post();
	Route::patch();
	Route::put();
	Route::delete();
	Route::option();
	para responder a varios metodos en la misma ruta entonces se puede usar:
	Route::match(['put','patch'],'/', function(){
		//
	});
	si se quiere responder a todos los tipos de peticiones se puede usar:
	Route::any('/', function(){
		//
	});
______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
5)- estructura de carpetas en laravel 10:
	app=> contiene el codigo fuente en el aplicativo
	bootstrap=> tiene el archivo app que se encarga de arracnar el framework y la carpeta cache que se encarga de cargar y guardar los archivos para que no se reprocesen en cada peticion
	config=>toda la configuracion de laravel
	database=>
	lang=>
	public=>
	resources=>
	router=>rutas del aplicativo
	storage=>
	tests=>
	vendor=>
	.editorconfig
	.env
	.env.example
	.gitattributes
	.gitignore
	.styleci.yml
	artisan
	composer.json
	composer.lock
	package.json
	phpunit.xml
	README.md
	vite.conf.js
_______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------

4)- para crear un proyecto nuevo hay dos posibilidades:
	ejemplo 1:
	principalmente en laragon se le da iniciar todo y todo queda iniciado apache php sql todo, adicionalmente con solo darle
	clic derecho creacion rapida de sitio web despliega un menu con varioas opciones y hay escojes laravel, paso seguido le
	asignas el nombre y abre la terminal y crea todo en automatico
	para ver los proyectos creados es neserario poner en la url el nombre del proyecto o carpeta seguido de .test ejemplo
	http://developmentsbd.test
	ejemplo 2:
	en laragon hay un boton que dice terminal , abre algo como el cmd o git en bash, debes primero comprobar la version del php con php -v luego de eso si no hay errores ingresa esto
	php global require laravel/installer 
	para que instale el instalador por terminal de laravel y paso seguido para crear un proyecto en laravel pones lo siguiente como : 
	laravel new nombreProyecto
_______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
3)- descargas php en su ultima version de la web oficial
	https://www.php.net/downloads
	https://windows.php.net/download#php-8.2
	link directo: 
	https://windows.php.net/downloads/releases/php-8.2.5-nts-Win32-vs16-x64.zip
	descomprimes el .zip que bajaste y esa carpeta que queda debes llevarla a C:\laragon\bin\php y pegarla hay
	paso seguido revisas en la terminal o cmd con php -v que este en su ultima version
_______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
3)- descargas php en su ultima version de la web oficial
	https://www.php.net/downloads
	https://windows.php.net/download#php-8.2
	link directo: 
	https://windows.php.net/downloads/releases/php-8.2.5-nts-Win32-vs16-x64.zip
	descomprimes el .zip que bajaste y esa carpeta que queda debes llevarla a C:\laragon\bin\php y pegarla hay
	paso seguido revisas en la terminal o cmd con php -v que este en su ultima version
_______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
2)- descargas composer de la web oficial
	https://getcomposer.org/
	link directo:
	https://getcomposer.org/Composer-Setup.exe
	luego verifica si laravel esta instalado en las variables del sistema asi tal cual como lo anterior con laravel -v
	si te sale error facil ve a las variables del sistema dependiendo el sistema ve a propidades del sistema
	luego a varibales de entorno, en variables del sistema buscas el path, das doble clic y te abre el modal
	para crear una nueva varibale y pones la siguiente ruta C:\Users\Developmet´s_BD\AppData\Roaming\Composer\vendor\bin
_______________________________________________________________________________________________________________________
//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//--/--//--//--//--//--//--//--//--//--//
-----------------------------------------------------------------------------------------------------------------------
1)-	te descargas laragon de su web oficial:
	https://laragon.org/download/index.html
	link directo: 
	https://github.com/leokhoa/laragon/releases/download/6.0.0/laragon-wamp.exe